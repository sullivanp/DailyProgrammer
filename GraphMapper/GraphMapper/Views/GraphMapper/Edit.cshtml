@model GraphMapper.Models.GraphMap

@{
    ViewBag.Title = "Edit";
}

<h2>Edit</h2>


@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    
    <div class="form-horizontal">
        <h4>GraphMap</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.ID)

        <div class="form-group">
            @Html.LabelFor(model => model.Rows, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Rows, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Rows, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Columns, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Columns, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Columns, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Save" class="btn btn-default" />
            </div>
        </div>
    </div>

    <div style="display:inline-block">
        @{
            
        <div class="graphmaptoolbar" style="width: 66px; height: 34px;">
            <a href="@ViewBag.ToolBarImageLinks[0]">
                <img src="~/Content/Shapes/ForegroundColorIcon32x32.png" style="left: 0px; top: 0px;" />
            </a>
            <a href="@ViewBag.ToolBarImageLinks[1]">
                <img src="~/Content/Shapes/BackgroundColorIcon32x32.png" style="left:33px; top: 0px;" />
            </a>
        </div>
            
        string shapePaletteWidth = ViewBag.ShapePaletteWidth + "px";
        string shapePaletteHeight = ViewBag.ShapePaletteHeight + "px";

        <article class="shapepalette" style="width: @shapePaletteWidth; height: @shapePaletteHeight;">
            @foreach (var item in ViewBag.ShapePalette.Shapes)
            {
                <a href="@ViewBag.ShapeImageLinks[item.Row, item.Column]">
                    <img src="@ViewBag.ShapePaletteImageFilenames[item.Row, item.Column]" style="left:@ViewBag.ShapePaletteImageLefts[item.Row, item.Column]px; top:@ViewBag.ShapePaletteImageTops[item.Row, item.Column]px;" />
                </a>
            }
        </article>

        string graphMapWidth = ViewBag.GraphMapWidth + "px";
        string graphMapHeight = ViewBag.GraphMapHeight + "px";

        <article class="graphmap" style="width: @graphMapWidth; height: @graphMapHeight;">
            @foreach (GraphMapper.Models.MapElement mapElement in Model.MapElements)
            {
                if (ViewBag.ShapeID != -1 && ViewBag.ForegroundColorID != -1 && ViewBag.BackgroundColorID != -1)
                {
                    <a href="@ViewBag.ImageLinks[mapElement.Row, mapElement.Column]">
                        <img src="@ViewBag.ImageFilenames[mapElement.Row, mapElement.Column]" style="left:@ViewBag.ImageLefts[mapElement.Row, mapElement.Column]px; top:@ViewBag.ImageTops[mapElement.Row, mapElement.Column]px;" />
                    </a>
                }
                else
                {
                    <img src="@ViewBag.ImageFilenames[mapElement.Row, mapElement.Column]" style="left:@ViewBag.ImageLefts[mapElement.Row, mapElement.Column]px; top:@ViewBag.ImageTops[mapElement.Row, mapElement.Column]px;" />
                }
            }
        </article>

        string previewImageWidthPx = ViewBag.PreviewImageWidth + 2 + "px";
        string previewImageHeightPx = ViewBag.PreviewImageHeight + 2 + "px";

        if(ViewBag.PreviewImageExists) {
        <article class="preview" style="width: @previewImageWidthPx; height: @previewImageWidthPx;">
            <img src="@ViewBag.PreviewImageFilename" width="@ViewBag.PreviewImageWidth" height="@ViewBag.PreviewImageHeight" />
        </article>
        }
        else
        {
        <article class="preview" style="width: @previewImageWidthPx; height: @previewImageHeightPx;"></article>
        }

        string colorPaletteWidth = ViewBag.ColorPaletteWidth + "px";
        string colorPaletteHeight = ViewBag.ColorPaletteHeight + "px";

        <article class="colorpalette" style="width: @colorPaletteWidth; height: @colorPaletteHeight;">
            @foreach (var item in ViewBag.ColorPalette.Colors)
            {
                <a href="@ViewBag.ColorImageLinks[item.Row, item.Column]">
                    <img src="@ViewBag.ColorPaletteImageFilenames[item.Row, item.Column]" style="left:@ViewBag.ColorPaletteImageLefts[item.Row, item.Column]px; top:@ViewBag.ColorPaletteImageTops[item.Row, item.Column]px;" />
                </a>
            }
        </article>
        }
    </div>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
